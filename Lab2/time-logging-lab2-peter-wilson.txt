ESTIMATE: 8hrs
----------------------------------------------------------------------------------------
Date	    StTime	    TimeSp	    LabPrt	    Work Completed
9/17/25     5:00pm	    1:00	    1	        Cloned Repo and put in trace.c started work on Question Sheet
9/18/25     12:20pm     3:00        1           trying to get gdb to work. working on questions
9/18/25     3:20pm      1:00        2           started setting up trace as a syscall
9/18/25     5:20pm      3:00        2           continued setting up trace as a syscall. got the trace to work.
9/18/25     8:20pm      3:00        3           Made set_priority and get_priority. tried to get a test to work.

-----------------------------------------------------------------------------------------
TOTAL: 11hrs

Difficulties:
- E1: had trouble getting the 2 windowed gdb to work
- E1: gdb not working anymore after having it working
    - I was typing kernel as kernal
- E2: user.h was giving me error with uint instead of unsigned int so I switched them and it worked
- E2: my syscall was erroring becuase I did not add a line to the prototypes

- E3: trying to find out how to get a specific process
    - used kkill as example code to loop through all processes
- E3: When I am runnig the test for get and set it is causing the kernel to panic
    - I cant seem to fix this. This is the panic info: scause=0xf sepc=0x800054f8 stval=0x3fffff4000 panic: kerneltrap

How to make a syscall
- in User add a .c file
- In makeFile add in UPROGS the .c file name
- in user.h add prototype
- in usys.pl add entry
- in syscall.h add a #define for the syscall
- in sysproc.c add the syscall code
- in syscall.c add syscall to array and prototype
- edit other files if needed (like proc.c when kfork needs to be edited or proc.h when you need to add a varible)

Summary
I came into this assignment confident that I could finish it but I was wrong and did not account for the possiblity
of unknow errors. In exersise 1 I had troulbe figuring out how to get the gdb windows to work but later figured out
that there were some commands that I was missing. Later I had to reset my VMbox and do it again and it was not working.
This was due to my spelling be off becuase I was typing kernal rather than kernel. In Exersise 2 user.h was giving me
errors in compalation which prevented me from moving foward but I fixed it by replacing the shortend version of uint
with unsighned int. I also was confused by an error that was caused by a lack of a prototype in syscall.c.
Finally in Exersise 3 I had a few problems such as not knowing how to find a specific process using a pid.
I later found some code in kkill that ran through all processes and checked them against a pid.
The final problem was one that I did not have time to fix and that I did not understand why it was happening.
When I ran the test for the set and get it would cause the kernel to panic. I deduced that the problem is in
the syscall of the set and get but I did not see anything wrong in it. With more time I am sure I could fix it
but I only have a few minutes left to submit.

